2.3 
Write a program to prompt the user for hours and rate per hour using input to compute gross pay. 
Use 35 hours and a rate of 2.75 per hour to test the program (the pay should be 96.25). 
You should use input to read a string and float() to convert the string to a number. 
Do not worry about error checking or bad user data.

# This first line is provided for you
hrs = float(input("Enter Hours:"))
pay = float(input("enter pay per hour:"))
payments=hrs*pay
print('Pay:', payments)

3.1 
Write a program to prompt the user for hours and rate per hour using input to compute gross pay. 
Pay the hourly rate for the hours up to 40 and 1.5 times the hourly rate for all hours worked above 40 hours. 
Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). 
You should use input to read a string and float() to convert the string to a number. 
Do not worry about error checking the user input - assume the user types numbers properly.

hrs = float(input("Enter Hours:"))
rate=float(input("Enter Rate Per Hour:"))
if hrs>=40:
    print((hrs-40) *rate*1.5+40*rate)
else:
    print(hrs*rate)
    
3.2
hrs = input("Enter Hours:")
rate=input("Enter Rate Per Hour:")
try:
    fhrs= float(hrs)
    frate=float(rate)
except:
    print('Error,please enter numeric input')
    quit()

print(fhrs,frate)
if fhrs>40:
    reg=fhrs*frate
    otp= (fhrs - 40.0) *(frate*0.5)
    xp=reg+otp
else:
    xp=fhrs*frate
print('Pay:',xp)

    
 3.3 
 Write a program to prompt for a score between 0.0 and 1.0.
 If the score is out of range, print an error. 
 If the score is between 0.0 and 1.0, print a grade using the following table:
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
If the user enters a value out of range, print a suitable error message and exit. For the test, enter a score of 0.85.

score=float(input("Enter Score:"))
if  score<=1.0:
    if score>=0.9: 
        print('A')
    elif score>=0.8:
        print('B')
    elif score>=0.7:
        print('C')
    elif score>=0.6:
        print('D')
    elif score<0.6 & score>=0.0:
        print('F')
    else:
        print('error')
else:
    print('score is not between 0-1')
    
4.6 
Write a program to prompt the user for hours and rate per hour using input to compute gross pay. 
Pay should be the normal rate for hours up to 40 and time-and-a-half for the hourly rate for all hours worked above 40 hours. 
Put the logic to do the computation of pay in a function called computepay() and use the function to do the computation. 
The function should return a value. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). 
You should use input to read a string and float() to convert the string to a number. 

hrs = input("Enter Hours:")
fhrs=float(hrs)
rate= input("Enter hourly rate:")
frate=float(rate)

def computepay(fhrs, frate):
    if fhrs<=40:
        return fhrs*frate
    elif fhrs>40:
        return (fhrs - 40.0) *(frate*0.5)+fhrs*frate
    
p = computepay(fhrs, frate)
print("Pay", p)


5.1
num = 0
tot = 0.0
while True:
    sval=input("enter a number:" )
    if sval =='done':
       break

    try:
       fval=float(sval)
    except:
       print('Invalid value')
       continue

    #print (fval)
    num= num+1
    tot= tot+fval

print("all done")
print(tot,num,tot/num)

5.2 
Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'. 
Once 'done' is entered, print out the largest and smallest of the numbers. 
If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore the number.
Enter 7, 2, bob, 10, and 4 and match the output below.

largest = None
smallest = None

while True:
    num = input("Enter a number: ")
    if num == "done": 
        break
    try:
        num = int(num)
        if largest is None or largest < num: 
            largest = num
        if smallest is None or smallest > num: 
            smallest = num
    except:
        print ("Invalid input")
        continue
print ("Maximum is",largest)
print ("Minimum is",smallest)

6.5 
Write code using find() and string slicing (see section 6.10) to extract the number at the end of the line below. 
Convert the extracted value to a floating point number and print it out.

text = "X-DSPAM-Confidence:    0.8475"
fnumber = text.find('0.8475')
number=float(text[23:])
print(number)

7.1 
Write a program that prompts for a file name, then opens that file and reads through the file,
and print the contents of the file in upper case.
Use the file words.txt to produce the output below.
You can download the sample data at http://www.py4e.com/code3/words.txt

# Use words.txt as the file name
fname=input("Enter file name: ")
f=open(fname)

for line in f:
    line=line.upper()
    line=line.rstrip()
    print(line)

7.2 
Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:
X-DSPAM-Confidence:    0.8475
Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. 
Do not use the sum() function or a variable named sum in your solution.
You can download the sample data at http://www.py4e.com/code3/mbox-short.txt when you are testing below enter mbox-short.txt as the file name.

fname = raw_input("Enter file name: ")
fh = open(fname)

count=0
total=0

for line in fh:
    if not line.startswith("X-DSPAM-Confidence:") : continue
    pos = line.find(':')
    num = float(line[pos+1:])
    total=total+num
    count= count+1    
print ("Average spam confidence:", total/count)

8.4 
Open the file romeo.txt and read it line by line. 
For each line, split the line into a list of words using the split() method. 
The program should build a list of words.
For each word on each line check to see if the word is already in the list and if not append it to the list. 
When the program completes, sort and print the resulting words in alphabetical order.
You can download the sample data at http://www.py4e.com/code3/romeo.txt

fname=input("Enter file name: ")
f=open(fname)

lst=list()
for line in f:
    stuff=line.rstrip().split()
    for word in stuff:
        if word in lst:
            continue
        else:
            lst.append(word)

lst.sort()            
print(lst)
